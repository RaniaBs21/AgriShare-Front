{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component } from '@angular/core';\nimport { CommonModule } from \"@angular/common\";\nimport { FormsModule, ReactiveFormsModule } from \"@angular/forms\";\nexport var TypeFormation = /*#__PURE__*/function (TypeFormation) {\n  TypeFormation[\"GUIDE\"] = \"Guide\";\n  TypeFormation[\"PRESENTIEL\"] = \"Pr\\u00E9sentiel\";\n  TypeFormation[\"WEBINAIRE\"] = \"Webinaire\";\n  return TypeFormation;\n}(TypeFormation || {});\nexport var CategorieFormation = /*#__PURE__*/function (CategorieFormation) {\n  CategorieFormation[\"AGRICULTURE_BIO\"] = \"Agriculture Bio\";\n  CategorieFormation[\"GESTION_COOPERATIVE\"] = \"Gestion de Coop\\u00E9rative\";\n  CategorieFormation[\"MECANISATION\"] = \"M\\u00E9canisation\";\n  CategorieFormation[\"IRRIGATION\"] = \"Irrigation\";\n  CategorieFormation[\"COMMERCIALISATION\"] = \"Commercialisation\";\n  CategorieFormation[\"INNOVATION\"] = \"Innovation\";\n  return CategorieFormation;\n}(CategorieFormation || {});\nlet FormationComponent = class FormationComponent {\n  constructor(service, formationService, router) {\n    this.service = service;\n    this.formationService = formationService;\n    this.router = router;\n    this.formations = [];\n    this.formation = {\n      id: null,\n      // Ajout de l'ID initialement à null\n      titre: '',\n      description: '',\n      date: '',\n      type: '',\n      categorie: ''\n    };\n    this.typeOptions = Object.keys(TypeFormation);\n    this.categorieOptions = Object.keys(CategorieFormation);\n    this.showFormEdit = false;\n    this.showForm = false;\n  }\n  ngOnInit() {\n    this.formationService.getAllFormations().subscribe(data => {\n      if (Array.isArray(data)) {\n        this.formations = data;\n      } else {\n        console.error('Les données récupérées ne sont pas un tableau');\n      }\n    }, error => {\n      console.error('Erreur lors de la récupération des formations', error);\n    });\n  }\n  participerFormation(formationId) {\n    console.log(`Participer à la formation avec l'ID: ${formationId}`);\n  }\n  toggleForm() {\n    this.showForm = !this.showForm;\n  }\n  toggleFormEdit(formationId) {\n    const selectedFormation = this.formations.find(f => f.id === formationId);\n    if (selectedFormation) {\n      this.formation = {\n        ...selectedFormation\n      }; // Charger les données de la formation dans le formulaire\n      this.initialFormation = {\n        ...selectedFormation\n      };\n      this.showFormEdit = !this.showFormEdit; // Inverser l'état d'affichage\n      this.showForm = false; // Assurer que le formulaire d'ajout est masqué\n    }\n  }\n  ajouterFormation() {\n    this.formationService.addFormation(this.formation).subscribe(newFormation => {\n      this.formations.push(newFormation);\n      this.showForm = false;\n      this.formation = {\n        id: null,\n        titre: '',\n        description: '',\n        date: '',\n        type: '',\n        categorie: ''\n      }; // Réinitialisation complète\n    }, error => {\n      console.error('Erreur lors de l\\'ajout de la formation', error);\n    });\n  }\n  loadFormationToEdit(formationId) {\n    const formationToEdit = this.formations.find(f => f.id === formationId);\n    if (formationToEdit) {\n      this.formation = {\n        ...formationToEdit\n      }; // Copie les données de la formation\n      this.showFormEdit = true; // Affiche le formulaire d'édition\n    }\n  }\n  modifierFormation() {\n    if (this.formation.id) {\n      this.formationService.updateFormation(this.formation.id, this.formation).subscribe(response => {\n        console.log(response); // Message de succès ou d'erreur renvoyé par le serveur\n        const index = this.formations.findIndex(f => f.id === this.formation.id);\n        if (index !== -1) {\n          this.formations[index] = {\n            ...this.formation\n          }; // Mise à jour de la formation modifiée\n        }\n        this.showFormEdit = false;\n      }, error => {\n        console.error('Erreur lors de la modification de la formation', error);\n      });\n    }\n  }\n  deleteFormation(formationId) {\n    this.formationService.deleteFormation(formationId).subscribe(response => {\n      this.formations = this.formations.filter(f => f.id !== formationId);\n    }, error => {\n      console.error('Erreur lors de la suppression de la formation', error);\n    });\n  }\n  isFormValid() {\n    return this.formation.titre && this.formation.description && this.formation.date && this.formation.type && this.formation.categorie;\n  }\n  isFormEditModified() {\n    return JSON.stringify(this.formation) !== JSON.stringify(this.initialFormation);\n  }\n  cancelAjout() {\n    this.showForm = false;\n  }\n  cancelModif() {\n    this.showFormEdit = false;\n  }\n};\nFormationComponent = __decorate([Component({\n  selector: 'app-formation',\n  standalone: true,\n  imports: [CommonModule, FormsModule, ReactiveFormsModule],\n  templateUrl: './formation.component.html',\n  styleUrls: ['./formation.component.css']\n})], FormationComponent);\nexport { FormationComponent };","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}